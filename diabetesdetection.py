# -*- coding: utf-8 -*-
"""diabetesDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LxYj2qAktf4DXBvigU-HQbP23vHnfdnZ
"""

from dl_model_pipeline import load_dl_model, load_scaler_dl
from ml_model_pipeline import load_ml_model, set_bmi, set_insulin, load_scaler_ml
from plot_performance import lst, plot_line

import streamlit as st
import pandas as pd
import numpy as np
import webbrowser

from PIL import Image
import plotly.graph_objs as go

# get the data
data = pd.read_csv('diabetess.csv')

linkedin_url = "www.linkedin.com/in/hassan-saleh-999a86157"

def main():

    my_page = st.sidebar.radio('Page Navigation', [
                               'Model Prediction', 'About'])

    if my_page == 'Model Prediction':

        # create a title and sub-title
        st.write("""
        # Diabetes Detection using Machine Learning and Deep Learning
        Diabetes mellitus is **a disorder in which the body does not produce enough or respond normally to insulin, 
        causing blood sugar (glucose) levels to be abnormally high**.
        The hormone insulin moves sugar from the blood into your cells to be stored or used for energy.
        With diabetes, your body either **doesn’t make enough insulin** or **can’t effectively use the insulin it does make**. 
        
        By: Hassan Saleh
        """)
        image = Image.open('DiabetesM.jpg')
        st.image(image, caption='images from adobe stock',
                 use_column_width=True)

        st.write("""
        ### Objective
        Build machine learning and deep learning models to accurately predict whether or not the patients have diabetes.
        """)

        # set a subheader
        st.subheader('Data Information:')
        # show the data as a table
        st.dataframe(data)
        # show statistics on the data
        st.write(data.describe())
        # user input data for model prediction
        st.sidebar.title("Input your data for model prediction")
        user_data = []
        user_data.append(
            st.sidebar.number_input(
                label="Pregnancies",
                min_value=0,
                max_value=40,
                value=2,
                format="%i"
            ))
        user_data.append(
            st.sidebar.number_input(
                label="Glucose",
                min_value=0,
                max_value=400,
                value=119,
                format="%i"
            ))
        user_data.append(
            st.sidebar.number_input(
                label="BloodPressure",
                min_value=0,
                max_value=400,
                value=64,
                format="%i"))
        user_data.append(
            st.sidebar.number_input(
                label="SkinThickness",
                min_value=0,
                max_value=400,
                value=18,
                format="%i"))
        user_data.append(
            st.sidebar.number_input(
                label="Insulin",
                min_value=0,
                max_value=1600,
                value=92,
                format="%i"))
        user_data.append(
            st.sidebar.number_input(
                label="BMI",
                min_value=0.0,
                max_value=100.0,
                value=39.4,
                format="%f",
                step=1.0))
        user_data.append(
            st.sidebar.number_input(
                label="DiabetesPedigreeFunction",
                min_value=0.0,
                max_value=400.0,
                value=0.775,
                format="%f",
                step=1.0))
        user_data.append(
            st.sidebar.number_input(
                label="Age",
                min_value=0,
                max_value=150,
                value=23,
                format="%i"))

        st.write(f"""
        
        # Your Input data:
        
        **Please enter your data in the side bar and double check your data.**
        
        |Pregnancies| Glucose |  BloodPressure | SkinThickness | Insulin | BMI | Diabetes Pedigree Function | Age|
        |-----------|---------|----------------|---------------|---------|-----|----------------------------|----|
        |{user_data[0]}| {user_data[1]}| {user_data[2]}| {user_data[3]}| {user_data[4]}|  {user_data[5]} | {user_data[6]}|{user_data[7]}|
        \n """)

        st.write("\n")
        button = st.button("Predict")

        image = Image.open('DiabetesI.jpg')
        st.image(image, caption='images from adobe stock',
                 use_column_width=True)

        # model prediction result for ML model
        def prediction_result_ml(pred, model_name):

            if np.argmax(pred, axis=1) == 1:
                st.write(f"**{model_name} Model Prediction:** \n")
                st.error("[Result] : You have risk of diabetes")
                st.error("[Confidence Level] : " +
                         str("{:.2f}".format(pred[0][1] * 100)) + "%")

            else:
                st.write(f"**{model_name} Model Prediction:** \n")
                st.success("[Result] : You are healthy")
                st.success("[Confidence Level] : " +
                           str("{:.2f}".format(pred[0][0] * 100)) + "%")

        # model prediction result for ANN model
        def prediction_result_dl(pred, model_name):

            if pred >= 0.5:
                st.write(f"**{model_name} Model Prediction:** \n")
                st.error('[Result] : You have high risk of diabetes')
                st.error("[Confidence Level] : " +
                         str("{:.2f}".format(pred[0][0] * 100)) + "%")
            else:
                st.write(f"**{model_name} Model Prediction:** \n")
                st.success("[Result] : You are healthy")
                st.success("[Confidence Level] : " +
                           str("{:.2f}".format((1 - pred[0][0]) * 100)) + "%")

        # preprocessing for ML model
        class Preprocessing:

            def __init__(self, user_data):
                self.user_data = user_data

            def feature_engineering(self, feat_en=False):
                if feat_en == True:
                    data = set_bmi(self.user_data)
                    data = set_insulin(data)
                    data = pd.get_dummies(data)
                return data

            def scaling_method(self, scaler, data_to_transform):
                num_col = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
                           'BMI', 'DiabetesPedigreeFunction', 'Age']

                try:
                    scaled_data = scaler.transform(data_to_transform)
                except:
                    scaled_data = pd.DataFrame(scaler.transform(
                        data_to_transform[num_col]), columns=data_to_transform[num_col].columns, index=data_to_transform[num_col].index)
                    bin_col = data_to_transform.drop(columns=num_col, axis=1)
                    scaled_data = bin_col.merge(
                        scaled_data, left_index=True, right_index=True, how="right")

                return scaled_data

        class ModelPrediction:

            def __init__(self, model, name):
                self.model = model
                self.name = name

            def predict(self, user_data, deepLearning=False):

                if deepLearning == True:
                    result = self.model.predict(user_data, verbose=0)
                    prediction_result_dl(result, self.name)
                else:
                    result = self.model.predict_proba(user_data)
                    prediction_result_ml(result, self.name)

        if button:
            # get record from user
            user_record = {}
            features = ['Pregnancies', 'Glucose', 'BloodPressure',
                        'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
            # append user data to dict
            for f, b in zip(features, user_data):
                user_record[f] = b
            # create dataframe based on user input data for model prediction
            user_data = pd.DataFrame(user_record, index=[0])

            # load ANN model
            nn_model = load_dl_model()
            # load scaler (Model of ML and DL were trained differently)
            min_max = load_scaler_dl()
            # data preprocessing
            data_dl = Preprocessing(user_data)
            data_dl_scaled = data_dl.scaling_method(min_max, user_data)
            # pass in loaded model and named it
            dl_pred = ModelPrediction(nn_model, "Deep Learning")
            # model prediction result for DL model
            dl_pred.predict(data_dl_scaled, deepLearning=True)

            # load ML models
            lgr, svc, dt, rdf, ada, lgbm  = load_ml_model()
            # load scaler (Model of ML and DL were trained differently)
            min_max_scaler, standard_scaler = load_scaler_ml()
            # pass in user_data
            df = Preprocessing(user_data)
            # apply standard scaler to user_data (w/o feature engineering)
            df_sd = df.scaling_method(standard_scaler, user_data)
            # apply min_max scaler to user_data (w/o feature engineering)
            df_mm = df.scaling_method(min_max_scaler, user_data)

            logisticReg = ModelPrediction(lgr, "LogisticRegression")
            logisticReg.predict(df_mm)

#             KNN = ModelPrediction(knn, "KNN")
#             KNN.predict(df_sd)

            supportVecM = ModelPrediction(svc, "SVC")
            supportVecM.predict(df_sd)

            DecisionTree = ModelPrediction(dt, "DecisionTree")
            DecisionTree.predict(user_data)

            Adaboost = ModelPrediction(ada, "AdaBoost")
            Adaboost.predict(user_data)

            RandomForest = ModelPrediction(rdf, "RandomForest")
            RandomForest.predict(user_data)

            LGBM = ModelPrediction(lgbm, "LGBM")
            LGBM.predict(user_data)

          

    elif my_page == 'About':
      image = Image.open('hassan1.jpg')
      st.image(image,use_column_width=True)
      st.subheader("About Me 👨‍🎓")
      st.text("Hi, I am Hassan. I am a data science who Helps people Create The change that Matters, and willing to change my ambitions to Reality, Pharmacist with demonstrated history of working in the pharmaceutical industry. Health Care and data analytics Enthusiast.")
      st.text("I take avid interests in breaking down complex problems and leverage data to drive business")
      if st.button("Linkedin 🔗"):
            webbrowser.open_new_tab(linkedin_url)
if __name__ == "__main__":
      main()